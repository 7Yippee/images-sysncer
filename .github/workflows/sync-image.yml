# 工作流名称
name: Sync-Images-to-Lesso-Harbor
# 工作流运行时显示名称
run-name: ${{ github.actor }} is Sync Images to Lesso Harbor.
# 怎样触发工作流
on:
  push:
    branches: [ "lesso-harbor" ]
    paths:
      - 'image_list.txt'
      - '.github/workflows/sync-image.yml'
  pull_request:
    branches: [ "lesso-harbor" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 工作流程任务（通常包含一个或多个步骤）
jobs:
  syncimages:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repos
      uses: actions/checkout@v3

    # 安装 skopeo
    - name: Install Skopeo
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
        # 安装 jq 用于 JSON 处理
        sudo apt-get install -y jq

    # 缓存 Docker 层，提高性能
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.9.1
      with:
        buildkitd-flags: --debug

    # 登录 Docker Hub (可选)
    - name: Login to Docker Hub
      continue-on-error: true
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ github.actor }}
        password: ${{ github.token }}
        logout: false

    # 登录 Lesso Harbor
    - name: Login to Lesso Harbor
      uses: docker/login-action@v2.2.0
      with:
        registry: harbor.prod.k8s.lesso.com
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
        logout: false

    # 优化的镜像同步过程
    - name: Sync Images to Lesso Harbor
      run: |
        #!/usr/bin/env bash
        set -euo pipefail

        # 创建日志目录
        mkdir -p logs

        # 读取镜像列表
        IMAGES=$(cat image_list.txt)
        TOTAL=$(echo "$IMAGES" | wc -l)
        CURRENT=0
        
        echo "::group::Starting sync of $TOTAL images to harbor.prod.k8s.lesso.com/istio/"
        
        # 定义并行数量，可根据 runner 性能调整
        PARALLEL=3
        
        # 定义重试次数
        MAX_RETRIES=3
        
        # 同步单个镜像的函数
        sync_image() {
          local image="$1"
          local target="harbor.prod.k8s.lesso.com/istio/$(basename "$image")"
          local log_file="logs/$(echo "$image" | tr '/:' '__').log"
          
          echo "Syncing: $image -> $target"
          
          # 检查目标镜像是否已存在并且相同
          if skopeo inspect --tls-verify=false "docker://$target" &>/dev/null; then
            # 获取源和目标的 digest
            SRC_DIGEST=$(skopeo inspect --tls-verify=false "docker://$image" | jq -r '.Digest')
            DST_DIGEST=$(skopeo inspect --tls-verify=false "docker://$target" | jq -r '.Digest')
            
            if [ "$SRC_DIGEST" = "$DST_DIGEST" ]; then
              echo "Image $target already exists with the same digest. Skipping."
              return 0
            fi
          fi
          
          # 使用重试机制
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i of $MAX_RETRIES: copying $image to $target"
            
            if skopeo copy --all --dest-tls-verify=false --src-tls-verify=false \
               "docker://$image" "docker://$target" &> "$log_file"; then
              echo "Successfully copied $image to $target"
              return 0
            else
              echo "Failed to copy $image to $target (attempt $i/$MAX_RETRIES)"
              sleep 2  # 重试前等待一会
            fi
          done
          
          echo "::error::Failed to copy $image to $target after $MAX_RETRIES attempts"
          cat "$log_file"
          return 1
        }
        
        # 导出函数使其在 xargs 中可用
        export -f sync_image
        
        # 并行处理镜像同步
        echo "$IMAGES" | xargs -P $PARALLEL -I{} bash -c 'sync_image "{}"'
        
        echo "::endgroup::"
        
        # 验证同步结果
        echo "::group::Verifying synced images"
        
        SUCCESS=0
        FAILED=0
        
        for image in $IMAGES; do
          target="harbor.prod.k8s.lesso.com/istio/$(basename "$image")"
          if skopeo inspect --tls-verify=false "docker://$target" &>/dev/null; then
            echo "✅ Verified: $target"
            SUCCESS=$((SUCCESS+1))
          else
            echo "❌ Failed: $target"
            FAILED=$((FAILED+1))
          fi
        done
        
        echo "::endgroup::"
        echo "Sync completed: $SUCCESS succeeded, $FAILED failed"
        
        # 如果有失败的镜像，则工作流失败
        if [ $FAILED -gt 0 ]; then
          exit 1
        fi